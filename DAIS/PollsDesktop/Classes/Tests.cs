using System;
using System.Collections.ObjectModel;
using PollsDesktop.DATABASE.DAO;
using PollsDesktop.DATABASE.DTO;
using PollsDesktop.DATABASE;

namespace PollsDesktop
{
    class Tests
    {
        public static void Users(Database db)
        {
            Console.WriteLine("             1) USERS TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE 1.1 (Adding user with login tomkonva00 generated by function 6.1 and setting state with function 1.6)");
            Console.WriteLine("----------------------------");

            UserDAO userDAO = new UserDAO();
            UserDTO newUser = new UserDTO();
            Collection<UserDTO> users = userDAO.Select();
            Console.WriteLine("1.4 SELECT ALL USERS");
            foreach (UserDTO user in users)
            {
                Console.WriteLine(user.Login + " " + user.Fname + " " + user.Lname + " " + user.Email);
            }
            
            //newUser.Login = "tomkonva00";
            newUser.Fname = "Tomas";
            newUser.Lname = "Konvalinka";
            newUser.Email = "email@test.com";
            newUser.RoleId = 3;
            newUser.State = "TEST";
            userDAO.Insert(newUser);
            users = userDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("1.4 SELECT ALL USERS");
            foreach (UserDTO user in users)
            {
                Console.WriteLine(user.Login + " " + user.Fname + " " + user.Lname + " " + user.Email + " " + user.State);
            }

            newUser.Email = "TEST@TESTTEST.TEST";
            userDAO.Update(newUser, db);
            users = userDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B) UPDATE 1.2 (Updating email at tomkonva00)");
            Console.WriteLine("----------------------------");
            Console.WriteLine("1.4 SELECT ALL USERS");
            foreach (UserDTO user in users)
            {
                Console.WriteLine(user.Login + " " + user.Fname + " " + user.Lname + " " + user.Email);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C) 1.5 SELECT USER BY LOGIN (tomkonva00)");
            Console.WriteLine("----------------------------");
            UserDTO selectedUser = userDAO.Select("tomkonva00", db);
            Console.WriteLine(selectedUser.Login + " " + selectedUser.Fname + " " + selectedUser.Lname + " " + selectedUser.Email + " " + selectedUser.LastVisit.ToString() + " " + selectedUser.RoleId.ToString() + " " + selectedUser.State);
            Console.WriteLine("----------------------------");

            Console.WriteLine("D) DELETE 1.3 (Deleting at tomkonva00)");
            userDAO.Delete("tomkonva00", db);
            users = userDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("1.4 SELECT ALL USERS");
            foreach (UserDTO user in users)
            {
                Console.WriteLine(user.Login + " " + user.Fname + " " + user.Lname + " " + user.Email);
            }
        }
        public static void Roles(Database db)
        {
            Console.WriteLine("             2) ROLES TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE (Adding role with title TEST)");
            Console.WriteLine("----------------------------");

            RoleDAO roleDAO = new RoleDAO();
            RoleDTO newRole = new RoleDTO();
            Collection<RoleDTO> roles = roleDAO.Select();
            Console.WriteLine("SELECT ALL ROLES");
            foreach (RoleDTO role in roles)
            {
                Console.WriteLine(role.ID + " " + role.Title + " " + role.Description);
            }

            newRole.Title = "TEST";
            newRole.Description = "Test role";
            roleDAO.Insert(newRole);
            roles = roleDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL ROLES");
            foreach (RoleDTO role in roles)
            {
                Console.WriteLine(role.ID + " " + role.Title + " " + role.Description);
            }
            newRole.ID = roles[roles.Count-1].ID;

            newRole.Description = "UPDATED DESC";
            roleDAO.Update(newRole, db);
            roles = roleDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B) UPDATE (Updating description at TEST)");
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL ROLES");
            foreach (RoleDTO role in roles)
            {
                Console.WriteLine(role.ID + " " + role.Title + " " + role.Description);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C) SELECT ROLE BY ID ("+newRole.ID+")");
            Console.WriteLine("----------------------------");
            RoleDTO selectedRole = roleDAO.Select(newRole.ID, db);
            Console.WriteLine(selectedRole.ID + " " + selectedRole.Title + " " + selectedRole.Description);
            Console.WriteLine("----------------------------");

            Console.WriteLine("D) DELETE (Deleting test role)");
            roleDAO.Delete(newRole.ID, db);
            roles = roleDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL ROLES");
            foreach (RoleDTO role in roles)
            {
                Console.WriteLine(role.ID + " " + role.Title + " " + role.Description);
            }
        }
        public static void Groups(Database db)
        {
            Console.WriteLine("             3) GROUPS TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) 2.1 CREATE (Adding group with title TEST)");
            Console.WriteLine("----------------------------");

            GroupDAO groupDAO = new GroupDAO();
            GroupDTO newGroup = new GroupDTO();
            Collection<GroupDTO> groups = groupDAO.Select();
            Console.WriteLine("2.5 SELECT ALL GROUPS");
            foreach (GroupDTO group in groups)
            {
                Console.WriteLine(group.Id + " " + group.Title + " " + group.Description + " " + group.ManagerLogin + " " + group.CreationDate.ToString());
            }

            newGroup.Title = "TEST";
            newGroup.Description = "Test group";
            newGroup.ManagerLogin = "andkralo00"; //Is in the database from start, if you delete it, test wont work.
            groupDAO.Insert(newGroup);
            groups = groupDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("2.5 SELECT ALL GROUPS");
            foreach (GroupDTO group in groups)
            {
                Console.WriteLine(group.Id + " " + group.Title + " " + group.Description + " " + group.ManagerLogin + " " + group.CreationDate.ToString());
            }
            newGroup.Id = groups[groups.Count - 1].Id;

            newGroup.Description = "UPDATED DESC";
            groupDAO.Update(newGroup, db);
            groups = groupDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B)2.2 UPDATE (Updating description at TEST)");
            Console.WriteLine("----------------------------");
            Console.WriteLine("2.5 SELECT ALL GROUPS");
            foreach (GroupDTO group in groups)
            {
                Console.WriteLine(group.Id + " " + group.Title + " " + group.Description + " " + group.ManagerLogin + " " + group.CreationDate.ToString());
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)2.4 SELECT GROUP BY ID (" + newGroup.Id + ")");
            Console.WriteLine("----------------------------");
            GroupDTO selectedGroup = groupDAO.Select(newGroup.Id, db);
            Console.WriteLine(selectedGroup.Id + " " + selectedGroup.Title + " " + selectedGroup.Description);
            Console.WriteLine("----------------------------");

            Console.WriteLine("D)2.3 DELETE (Deleting test group)");
            groupDAO.Delete(newGroup.Id, db);
            groups = groupDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("2.5 SELECT ALL GROUPS");
            foreach (GroupDTO group in groups)
            {
                Console.WriteLine(group.Id + " " + group.Title + " " + group.Description + " " + group.ManagerLogin + " " + group.CreationDate.ToString());
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("E)2.7 SELECT USERS WITH MOST ANSWERS IN GROUP WITH ID 1");
            Collection<String> users = groupDAO.SelectUsersWithMostAnswers(1, db);
            Console.WriteLine("----------------------------");
            foreach(String s in users)
            {
                Console.WriteLine("Login: " + s);
            }

        }
        public static void UserGroups(Database db)
        {
            Console.WriteLine("             4) USERGROUPS TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE (Adding user with login zdelakat00 to group with id 2)");
            Console.WriteLine("----------------------------");

            UserGroupDAO userGroupDAO = new UserGroupDAO();
            UserGroupDTO newUserGroup = new UserGroupDTO();
            Collection<UserGroupDTO> userGroups = userGroupDAO.Select();
            Console.WriteLine("SELECT ALL USERGROUPS");
            foreach (UserGroupDTO userGroup in userGroups)
            {
                Console.WriteLine(userGroup.UserLogin + " " + userGroup.GroupId);
            }

            newUserGroup.UserLogin = "zdelakat00";
            newUserGroup.GroupId = 2;
            userGroupDAO.Insert(newUserGroup);
            userGroups = userGroupDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL USERGROUPS");
            foreach (UserGroupDTO userGroup in userGroups)
            {
                Console.WriteLine(userGroup.UserLogin + " " + userGroup.GroupId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("B)SELECT USERGROUP BY USER_LOGIN (" + newUserGroup.UserLogin + ")");
            Console.WriteLine("----------------------------");
            userGroups = userGroupDAO.SelectByUserLogin(newUserGroup.UserLogin, db);
            foreach (UserGroupDTO userGroup in userGroups)
            {
                Console.WriteLine(userGroup.UserLogin + " " + userGroup.GroupId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)2.6 SELECT USERGROUP BY GROUP_ID (" + newUserGroup.GroupId + ")");
            Console.WriteLine("----------------------------");
            userGroups = userGroupDAO.SelectByGroupId(newUserGroup.GroupId, db);
            foreach (UserGroupDTO userGroup in userGroups)
            {
                Console.WriteLine(userGroup.UserLogin + " " + userGroup.GroupId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("D)DELETE (Deleting user zdelakat00 from group 2)");
            userGroupDAO.DeleteUserFromGroup(newUserGroup.GroupId, newUserGroup.UserLogin, db);
            userGroups = userGroupDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL USERGROUPS");
            foreach (UserGroupDTO userGroup in userGroups)
            {
                Console.WriteLine(userGroup.UserLogin + " " + userGroup.GroupId);
            }
        }
        public static void Notifications(Database db)
        {
            Console.WriteLine("             5) NOTIFICATIONS TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A)7.1 CREATE (Adding notification with text TEST)");
            Console.WriteLine("----------------------------");

            NotificationDAO notificationDAO = new NotificationDAO();
            NotificationDTO newNotification = new NotificationDTO();
            Collection<NotificationDTO> notifications = notificationDAO.Select();
            Console.WriteLine("7.2 SELECT ALL NOTIFICATIONS");
            foreach (NotificationDTO notification in notifications)
            {
                Console.WriteLine(notification.Id + " " + notification.Text + " " + notification.UserLogin);
            }

            newNotification.Text = "TEST";
            newNotification.UserLogin = "zdelakat00";
            notificationDAO.Insert(newNotification);
            notifications = notificationDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("7.2 SELECT ALL NOTIFICATIONS");
            foreach (NotificationDTO notification in notifications)
            {
                Console.WriteLine(notification.Id + " " + notification.Text + " " + notification.UserLogin);
            }
            newNotification.Id = notifications[notifications.Count - 1].Id;

            newNotification.Text = "UPDATED TEXT";
            notificationDAO.Update(newNotification, db);
            notifications = notificationDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B) UPDATE (Updating TEXT at "+newNotification.Id+")");
            Console.WriteLine("----------------------------");
            Console.WriteLine("7.2 SELECT ALL NOTIFICATIONS");
            foreach (NotificationDTO notification in notifications)
            {
                Console.WriteLine(notification.Id + " " + notification.Text + " " + notification.UserLogin);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)7.3 SELECT NOTIFICATION BY ID (" + newNotification.Id + ")");
            Console.WriteLine("----------------------------");
            NotificationDTO selectedNotification = notificationDAO.Select(newNotification.Id, db);
            Console.WriteLine(selectedNotification.Id + " " + selectedNotification.Text + " " + selectedNotification.UserLogin);
            Console.WriteLine("----------------------------");

            Console.WriteLine("D)7.4 DELETE (Deleting test notification)");
            notificationDAO.Delete(newNotification.Id, db);
            notifications = notificationDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("7.2 SELECT ALL NOTIFICATION");
            foreach (NotificationDTO notification in notifications)
            {
                Console.WriteLine(notification.Id + " " + notification.Text + " " + notification.UserLogin);
            }
        }
        public static void Categories(Database db)
        {
            Console.WriteLine("             6) CATEGORIES TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A)4.1 CREATE (Adding category with title TEST)");
            Console.WriteLine("----------------------------");

            CategoryDAO categoryDAO = new CategoryDAO();
            CategoryDTO categoryDTO = new CategoryDTO();
            Collection<CategoryDTO> categories = categoryDAO.Select();
            Console.WriteLine("4.4 SELECT ALL CATEGORIES");
            foreach (CategoryDTO category in categories)
            {
                Console.WriteLine(category.Id + " " + category.Title + " " + category.Description);
            }

            categoryDTO.Title = "TEST";
            categoryDTO.Description = "Test category";
            categoryDAO.Insert(categoryDTO);
            categories = categoryDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("4.4 SELECT ALL CATEGORIES");
            foreach (CategoryDTO category in categories)
            {
                Console.WriteLine(category.Id + " " + category.Title + " " + category.Description);
            }
            categoryDTO.Id = categories[categories.Count - 1].Id;

            categoryDTO.Description = "UPDATED DESC";
            categoryDAO.Update(categoryDTO, db);
            categories = categoryDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B)4.2 UPDATE (Updating description at TEST category)");
            Console.WriteLine("----------------------------");
            Console.WriteLine("4.4 SELECT ALL CATEGORIES");
            foreach (CategoryDTO category in categories)
            {
                Console.WriteLine(category.Id + " " + category.Title + " " + category.Description);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)4.5 SELECT CATEGORY BY ID (" + categoryDTO.Id + ")");
            Console.WriteLine("----------------------------");
            CategoryDTO selectedCategory = categoryDAO.Select(categoryDTO.Id, db);
            Console.WriteLine(selectedCategory.Id + " " + selectedCategory.Title + " " + selectedCategory.Description);
            Console.WriteLine("----------------------------");

            Console.WriteLine("D)4.3 DELETE (Deleting test category)");
            categoryDAO.Delete(categoryDTO.Id, db);
            categories = categoryDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("4.5 SELECT ALL ROLES");
            foreach (CategoryDTO category in categories)
            {
                Console.WriteLine(category.Id + " " + category.Title + " " + category.Description);
            }
        }
        public static void States(Database db)
        {
            Console.WriteLine("             7) STATES TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A)CREATE (Adding state with title TEST)");
            Console.WriteLine("----------------------------");

            StateDAO stateDAO = new StateDAO();
            StateDTO stateDTO = new StateDTO();
            Collection<StateDTO> states = stateDAO.Select();
            Console.WriteLine("SELECT ALL States");
            foreach (StateDTO state in states)
            {
                Console.WriteLine(state.Id + " " + state.Title);
            }

            stateDTO.Title = "TEST";
            stateDAO.Insert(stateDTO);
            states = stateDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL STATES");
            foreach (StateDTO state in states)
            {
                Console.WriteLine(state.Id + " " + state.Title);
            }
            stateDTO.Id = states[states.Count - 1].Id;

            stateDTO.Title = "UPDATED";
            stateDAO.Update(stateDTO, db);
            states = stateDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B)UPDATE (Updating TITLE at TEST state)");
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL STATES");
            foreach (StateDTO state in states)
            {
                Console.WriteLine(state.Id + " " + state.Title);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)SELECT STATE BY ID (" + stateDTO.Id + ")");
            Console.WriteLine("----------------------------");
            StateDTO selectedState = stateDAO.Select(stateDTO.Id, db);
            Console.WriteLine(selectedState.Id + " " + selectedState.Title);
            Console.WriteLine("----------------------------");

            Console.WriteLine("D)DELETE (Deleting test state)");
            stateDAO.Delete(stateDTO.Id, db);
            states = stateDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL STATES");
            foreach (StateDTO state in states)
            {
                Console.WriteLine(state.Id + " " + state.Title);
            }
        }
        public static void GroupCategories(Database db)
        {
            Console.WriteLine("             8) GROUPCATEGORIES TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE (Adding group with id 2 to category with id 2)");
            Console.WriteLine("----------------------------");

            GroupCategoryDAO groupCategoryDAO = new GroupCategoryDAO();
            GroupCategoryDTO groupCategory = new GroupCategoryDTO();
            Collection<GroupCategoryDTO> groupCategories = groupCategoryDAO.Select();
            Console.WriteLine("SELECT ALL GROUPCATEGORIES");
            foreach (GroupCategoryDTO groupCategoryF in groupCategories)
            {
                Console.WriteLine(groupCategoryF.CategoryId + " " + groupCategoryF.GroupId);
            }

            groupCategory.CategoryId = 2;
            groupCategory.GroupId = 2;
            groupCategoryDAO.Insert(groupCategory);
            groupCategories = groupCategoryDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL GROUPCATEGORIES");
            foreach (GroupCategoryDTO groupCategoryF in groupCategories)
            {
                Console.WriteLine(groupCategoryF.CategoryId + " " + groupCategoryF.GroupId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("B)SELECT GROUPCATEGORY BY CATEGORY_ID (" + groupCategory.CategoryId + ")");
            Console.WriteLine("----------------------------");
            groupCategories = groupCategoryDAO.SelectByCategoryId(groupCategory.CategoryId, db);
            foreach (GroupCategoryDTO groupCategoryF in groupCategories)
            {
                Console.WriteLine(groupCategoryF.CategoryId + " " + groupCategoryF.GroupId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)2.6 SELECT GROUPCATEGORY BY GROUP_ID (" + groupCategory.GroupId + ")");
            Console.WriteLine("----------------------------");
            groupCategories = groupCategoryDAO.SelectByGroupId(groupCategory.GroupId, db);
            foreach (GroupCategoryDTO groupCategoryF in groupCategories)
            {
                Console.WriteLine(groupCategoryF.CategoryId + " " + groupCategoryF.GroupId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("D)DELETE (Deleting group with id 2 from category with id 2)");
            groupCategoryDAO.DeleteCategoryFromGroup(groupCategory.CategoryId, groupCategory.GroupId, db);
            groupCategories = groupCategoryDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL GROUPCATEGORIES");
            foreach (GroupCategoryDTO groupCategoryF in groupCategories)
            {
                Console.WriteLine(groupCategoryF.CategoryId + " " + groupCategoryF.GroupId);
            }
        }
        public static void Surveys(Database db) {
            Console.WriteLine("             10) SURVEY TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE 3.1 (Adding survey with title TEST)");
            Console.WriteLine("----------------------------");

            SurveyDAO surveyDAO = new SurveyDAO();
            SurveyDTO newSurvey = new SurveyDTO();
            Collection<SurveyDTO> surveys = surveyDAO.Select();
            Console.WriteLine("3.3 SELECT ALL SURVEYS");
            foreach (SurveyDTO survey in surveys)
            {
                Console.WriteLine(survey.Id + " " + survey.Title + " " + survey.Description + " " + survey.StateId + " " + survey.AnswersPercentage);
            }

            newSurvey.Title = "TEST";
            newSurvey.Description = "TEST DESC";
            newSurvey.Text = "kdjnajdjadjkadjkadbnajk";
            newSurvey.GroupId = 1;
            surveyDAO.Insert(newSurvey);
            surveys = surveyDAO.Select();
            newSurvey.Id = surveyDAO.Select()[surveyDAO.Select().Count - 1].Id;

            Console.WriteLine("----------------------------");
            Console.WriteLine("3.3 SELECT ALL SURVEYS");
            foreach (SurveyDTO survey in surveys)
            {
                Console.WriteLine(survey.Id + " " + survey.Title + " " + survey.Description + " " + survey.StateId + " " + survey.AnswersPercentage);
            }

            newSurvey.Description = "UPDATED DESCRIPTION";
            surveyDAO.Update(newSurvey, db);
            surveys = surveyDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("B) UPDATE (Updating descritpion)");
            Console.WriteLine("----------------------------");
            Console.WriteLine("3.3 SELECT ALL SURVEYS");
            foreach (SurveyDTO survey in surveys)
            {
                Console.WriteLine(survey.Id + " " + survey.Title + " " + survey.Description + " " + survey.StateId + " " + survey.AnswersPercentage);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C) 3.2 SELECT SURVEY BY ID ("+newSurvey.Id+")");
            Console.WriteLine("----------------------------");
            SurveyDTO selectedSurvey = surveyDAO.Select(newSurvey.Id, db);
            Console.WriteLine(selectedSurvey.Id + " " + selectedSurvey.Title + " " + selectedSurvey.Description + " " + selectedSurvey.StateId + " " + selectedSurvey.AnswersPercentage);
            Console.WriteLine("----------------------------");

            Console.WriteLine("----------------------------");
            Console.WriteLine("D) 3.4 START SURVEY BY ID (" + newSurvey.Id + ")");
            Console.WriteLine("----------------------------");
            System.Threading.Thread.Sleep(5000);
            SurveyDAO.StartSurvey(newSurvey.Id, db);
            selectedSurvey = surveyDAO.Select(newSurvey.Id, db);
            Console.WriteLine(selectedSurvey.Id + " " + selectedSurvey.Title + " " + selectedSurvey.Description + " " + selectedSurvey.StateId + " " + selectedSurvey.AnswersPercentage + " " + selectedSurvey.CreationDate.ToString());

            Console.WriteLine("----------------------------");
            Console.WriteLine("E) 3.5 END SURVEY BY ID (" + newSurvey.Id + ")");
            Console.WriteLine("----------------------------");
            System.Threading.Thread.Sleep(5000);
            SurveyDAO.EndSurvey(newSurvey.Id, db);
            selectedSurvey = surveyDAO.Select(newSurvey.Id, db);
            Console.WriteLine(selectedSurvey.Id + " " + selectedSurvey.Title + " " + selectedSurvey.Description + " " + selectedSurvey.StateId + " " + selectedSurvey.AnswersPercentage + " " + selectedSurvey.CreationDate.ToString() + " " + selectedSurvey.Duration);

            Console.WriteLine("----------------------------");
            Console.WriteLine("F) 3.6 ARCHIVE SURVEY BY ID (" + newSurvey.Id + ")");
            Console.WriteLine("----------------------------");
            SurveyDAO.ArchiveSurvey(newSurvey.Id, db);
            selectedSurvey = surveyDAO.Select(newSurvey.Id, db);
            Console.WriteLine(selectedSurvey.Id + " " + selectedSurvey.Title + " " + selectedSurvey.Description + " " + selectedSurvey.StateId + " " + selectedSurvey.AnswersPercentage);

            Console.WriteLine("----------------------------");
            Console.WriteLine("G) 6.2 SET ANSWERS PERCENTAGE (" + newSurvey.Id + ")");
            Console.WriteLine("----------------------------");
            SurveyDAO.SetAnswerPercentage(newSurvey.Id, db);
            selectedSurvey = surveyDAO.Select(newSurvey.Id, db);
            Console.WriteLine(selectedSurvey.Id + " " + selectedSurvey.Title + " " + selectedSurvey.Description + " " + selectedSurvey.StateId + " " + selectedSurvey.AnswersPercentage);


            Console.WriteLine("----------------------------");
            Console.WriteLine("I) 3.9 COPY SURVEY (1)");
            Console.WriteLine("----------------------------");
            SurveyDAO.CopySurvey(newSurvey.Id, db);
            surveys = surveyDAO.Select();
            Console.WriteLine("3.3 SELECT ALL SURVEYS");
            foreach (SurveyDTO survey in surveys)
            {
                Console.WriteLine(survey.Id + " " + survey.Title + " " + survey.Description + " " + survey.StateId + " " + survey.AnswersPercentage);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("J) 3.8 SEND STATISTICS FOR SURVEY (1)");
            Console.WriteLine("----------------------------");
            Console.WriteLine(SurveyDAO.SendStatistics(1, db));

            Console.WriteLine("K) DELETE 3.9 (Deleting test surveys)");
            surveyDAO.Delete(newSurvey.Id, db);
            surveyDAO.Delete(newSurvey.Id+1, db);
            surveys = surveyDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("3.3 SELECT ALL SURVEYS");
            foreach (SurveyDTO survey in surveys)
            {
                Console.WriteLine(survey.Id + " " + survey.Title + " " + survey.Description + " " + survey.StateId + " " + survey.AnswersPercentage);
            }
        }
        public static void Answers(Database db) {
            Console.WriteLine("             10) ANSWERS TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE 5.1 ");
            Console.WriteLine("----------------------------");

            AnswerDAO answerDAO = new AnswerDAO();
            AnswerDTO newAnswer= new AnswerDTO();
            Collection<AnswerDTO> answers = answerDAO.Select();
            Console.WriteLine("5.2 SELECT ALL ANSWERS");
            foreach (AnswerDTO answer in answers)
            {
                Console.WriteLine(answer.Id + " " + answer.Text + " " + answer.UserLogin + " " + answer.CreationDate.ToString());
            }

            //newUser.Login = "tomkonva00";
            newAnswer.Text = "TEST";
            newAnswer.UserLogin = "zdelakat00";
            newAnswer.SurveyId = 1;
            answerDAO.Insert(newAnswer);
            answers = answerDAO.Select();
            newAnswer.Id = answerDAO.Select()[answerDAO.Select().Count - 1].Id;

            Console.WriteLine("----------------------------");
            Console.WriteLine("5.2 SELECT ALL ANSWERS");
            foreach (AnswerDTO answer in answers)
            {
                Console.WriteLine(answer.Id + " " + answer.Text + " " + answer.UserLogin + " " + answer.CreationDate.ToString());
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C) 5.3 SELECT ANSWER BY ID");
            Console.WriteLine("----------------------------");
            AnswerDTO selectedAnswer = answerDAO.Select(newAnswer.Id, db);
            Console.WriteLine(selectedAnswer.Id + " " + selectedAnswer.Text + " " + selectedAnswer.UserLogin + " " + selectedAnswer.CreationDate.ToString());
            Console.WriteLine("----------------------------");

            Console.WriteLine("D) DELETE 5.4");
            answerDAO.Delete(newAnswer.Id, db);
            answers = answerDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("5.2 SELECT ALL ANSWERS");
            foreach (AnswerDTO answer in answers)
            {
                Console.WriteLine(answer.Id + " " + answer.Text + " " + answer.UserLogin + " " + answer.CreationDate.ToString());
            }
        }
        public static void SurveyCategories(Database db) {
            Console.WriteLine("             11) SURVEYCATEGORIES TEST");
            Console.WriteLine("----------------------------");
            Console.WriteLine("A) CREATE (Adding survey with id 1 to category with id 2)");
            Console.WriteLine("----------------------------");

            SurveyCategoryDAO surveyCategoryDAO = new SurveyCategoryDAO();
            SurveyCategoryDTO surveyCategory = new SurveyCategoryDTO();
            Collection<SurveyCategoryDTO> surveyCategories = surveyCategoryDAO.Select();
            Console.WriteLine("SELECT ALL SURVEYCATEGORIES");
            foreach (SurveyCategoryDTO surveyCategoryF in surveyCategories)
            {
                Console.WriteLine(surveyCategoryF.CategoryId + " " + surveyCategoryF.SurveyId);
            }

            surveyCategory.CategoryId = 2;
            surveyCategory.SurveyId = 1;
            surveyCategoryDAO.Insert(surveyCategory);
            surveyCategories = surveyCategoryDAO.Select();

            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL SURVEYCATEGORIES");
            foreach (SurveyCategoryDTO surveyCategoryF in surveyCategories)
            {
                Console.WriteLine(surveyCategoryF.CategoryId + " " + surveyCategoryF.SurveyId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("B)SELECT SURVEYCATEGORY BY CATEGORY_ID (" + surveyCategory.CategoryId + ")");
            Console.WriteLine("----------------------------");
            surveyCategories = surveyCategoryDAO.SelectByCategoryId(surveyCategory.CategoryId, db);
            foreach (SurveyCategoryDTO surveyCategoryF in surveyCategories)
            {
                Console.WriteLine(surveyCategoryF.CategoryId + " " + surveyCategoryF.SurveyId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("C)SELECT SURVEYCATEGORY BY SURVEY_ID (" + surveyCategory.SurveyId + ")");
            Console.WriteLine("----------------------------");
            surveyCategories = surveyCategoryDAO.SelectBySurveyId(surveyCategory.SurveyId, db);
            foreach (SurveyCategoryDTO surveyCategoryF in surveyCategories)
            {
                Console.WriteLine(surveyCategoryF.CategoryId + " " + surveyCategoryF.SurveyId);
            }

            Console.WriteLine("----------------------------");
            Console.WriteLine("D)DELETE (Deleting survey with id 1 from category with id 2)");
            surveyCategoryDAO.DeleteCategoryFromSurvey(surveyCategory.SurveyId, surveyCategory.CategoryId, db);
            surveyCategories = surveyCategoryDAO.Select();
            Console.WriteLine("----------------------------");
            Console.WriteLine("SELECT ALL SURVEYCATEGORIES");
            foreach (SurveyCategoryDTO surveyCategoryF in surveyCategories)
            {
                Console.WriteLine(surveyCategoryF.CategoryId + " " + surveyCategoryF.SurveyId);
            }
        }
    }
}
